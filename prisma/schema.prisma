// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  playlists     Playlist[]
  watchLater    WatchLater[]
  savedVideo    SavedVideo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  videoId   String
}

model Playlist {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  title     String
  saved     SavedVideo[]
  user      User         @relation(fields: [userId], references: [id])
  userId    String

  @@unique([title,userId])
}

model WatchLater {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  thumbnail         String
  title             String
  authorTitle       String
  views             Int
  publishedTimeText String
  user              User    @relation(fields: [userId], references: [id])
  userId            String
  videoId           String

  @@unique([videoId,userId])

}

model SavedVideo {
  id                String   @id @default(uuid())
  videoId           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  thumbnail         String
  title             String
  authorTitle       String
  views             Int
  publishedTimeText String
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  playlistId        String
  playlist          Playlist @relation(fields: [playlistId], references: [id])

  @@unique([videoId,userId])
}

// model WatchLater {
//   id  String @id @default(uuid())
//   saved   SavedVideo[]

// }
